{"version":3,"sources":["app/models/activity.ts","app/models/pagination.ts","app/api/agent.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/profileStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","features/testing/Testing.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["Activity","init","Object","assign","this","ActivityFormValues","activity","id","undefined","title","category","description","date","city","venue","PaginatedResult","data","pagination","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","create","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","state","createActivity","userStore","attendee","newActivity","hostUsername","attendees","updateActivity","updatedActivity","deleteActivity","updateAttendance","isGoing","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","some","isHost","host","find","x","Date","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setImage","setDisplayName","name","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","p","activityStore","followingCount","loadFollowings","loadUserActivities","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComments","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","MenuItem","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","Header","textAlign","placeholder","type","render","marginBottom","fluid","ValidationErrors","Message","List","map","err","i","validationSchema","Yup","required","isValid","dirty","disabled","Segment","vertical","size","isLoggedIn","Reveal","animated","Content","visible","width","hidden","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","horizontal","attedee","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Group","attached","secondary","clearing","floated","groupedActivities","group","sub","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","Statistic","Divider","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","setEditMode","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","menuPosition","Testing","startDate","setStartDate","selection","search","flag","Table","celled","Row","HeaderCell","Body","Cell","Footer","colSpan","negative","GridRow","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.c3cdeff1.chunk.js","sourcesContent":["import {Profile} from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n    \r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n    \r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n    \r\n    constructor(pageNumber = 1, pageSize = 5) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, {AxiosError, AxiosResponse} from \"axios\";\r\nimport {Activity, ActivityFormValues} from \"../models/activity\";\r\nimport {toast} from \"react-toastify\";\r\nimport {history} from \"../../index\";\r\nimport {store} from \"../stores/store\";\r\nimport {User, UserFormValues} from \"../models/user\";\r\nimport {Photo, Profile, UserActivity} from \"../models/profile\";\r\nimport {PaginatedResult} from \"../models/pagination\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development')\r\n        await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T> (url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import {User} from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import {makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport {Activity, ActivityFormValues} from \"../models/activity\";\r\nimport agent from \"../api/agent\";\r\nimport {format} from \"date-fns\";\r\nimport {store} from \"./store\";\r\nimport {Profile} from \"../models/profile\";\r\nimport {Pagination, PagingParams} from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        \r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n    \r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n    \r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n    \r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n    \r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values())\r\n            .sort((a, b) =>\r\n                a.date!.getTime() - b.date!.getTime());\r\n    }\r\n    \r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n    \r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n                result.data.forEach(activity => {\r\n                    this.setActivity(activity);\r\n                })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n    \r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n    \r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            runInAction(() => {\r\n                this.selectedActivity = activity;\r\n            })\r\n            return activity;\r\n        } else {\r\n            this.loading = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                // this.setLoadingInitial(false);\r\n                this.loading = false;\r\n                return activity;\r\n            } catch (e) {\r\n                console.log(e);\r\n                // this.setLoadingInitial(false);\r\n                this.loading = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    private setActivity(activity: Activity) {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            );\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        \r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n    \r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n    \r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n    \r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n    \r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n    \r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n    \r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    \r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    \r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n    \r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import {User, UserFormValues} from \"../models/user\";\r\nimport {makeAutoObservable, runInAction} from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport {store} from \"./store\";\r\nimport {history} from \"../../index\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n    \r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n    \r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n    \r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    \r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user)\r\n            this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}","import {Photo, Profile, UserActivity} from \"../models/profile\";\r\nimport {makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport {store} from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        \r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n    \r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos = this.profile.photos.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    \r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    \r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username,\r\n                predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import ActivityStore from \"./activityStore\";\r\nimport {createContext, useContext} from \"react\";\r\nimport CommonStore from \"./commonStore\";\r\nimport UserStore from \"./userStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport CommentStore from \"./commentStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import {ServerError} from \"../models/serverError\";\r\nimport {makeAutoObservable, reaction} from \"mobx\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        \r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n    \r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n    \r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n    \r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import {makeAutoObservable} from \"mobx\";\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n    \r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n    \r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import {ChatComment} from \"../models/comment\";\r\nimport {HubConnection, HubConnectionBuilder, LogLevel} from \"@microsoft/signalr\";\r\nimport {makeAutoObservable, runInAction} from \"mobx\";\r\nimport {store} from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n    \r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n            \r\n            this.hubConnection?.start().catch(error => console.log('Error establishing the connection: ', error));\r\n            \r\n            this.hubConnection?.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments;                \r\n                });\r\n            });\r\n            \r\n            this.hubConnection?.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);   \r\n                });\r\n            });\r\n        }\r\n    }\r\n    \r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n    \r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n    \r\n    addComments = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport {Button, Container, Dropdown, Image, Menu, MenuItem} from \"semantic-ui-react\";\r\nimport {Link, NavLink} from \"react-router-dom\";\r\nimport {useStore} from \"../stores/store\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nexport default observer(function NavBar() {\r\n    const {userStore: {user, logout}} = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities'/>\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors'/>\r\n                <Menu.Item>\r\n                   <Button as={NavLink} to='/createActivity' positive content='Create Activity' /> \r\n                </Menu.Item>\r\n                <MenuItem position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </MenuItem>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import React from \"react\";\r\nimport {useField} from \"formik\";\r\nimport {Form, Label} from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React from \"react\";\r\nimport {Formik, Form, ErrorMessage} from \"formik\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport {Button, Header, Label} from \"semantic-ui-react\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error =>\r\n                setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput placeholder='Email' name='email' />\r\n                    <MyTextInput placeholder='Password' name='password' type='password' />\r\n                    <ErrorMessage name='error' render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />} />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport {Message} from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import React from \"react\";\r\nimport {Formik, Form, ErrorMessage} from \"formik\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport {Button, Header} from \"semantic-ui-react\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error =>\r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required()\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextInput placeholder='Username' name='username' />\r\n                    <MyTextInput placeholder='Email' name='email' />\r\n                    <MyTextInput placeholder='Password' name='password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                        <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting}\r\n                            loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {Button, Container, Header, Image, Segment} from \"semantic-ui-react\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                    </>\r\n                    )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React, {SyntheticEvent} from \"react\";\r\nimport {Profile} from \"../../app/models/profile\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Button, Reveal} from \"semantic-ui-react\";\r\nimport {useStore} from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n    \r\n    if (userStore.user?.username === profile.username) return null;\r\n    \r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n    \r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button\r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following'}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import React from \"react\";\r\nimport {Profile} from \"../../app/models/profile\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Card, Icon, Image} from \"semantic-ui-react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || 'assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount === 1 ?\r\n                    profile.followersCount + ' follower' :\r\n                    profile.followersCount + ' followers'}\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import React from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Image, List, Popup} from \"semantic-ui-react\";\r\nimport {Profile} from \"../../../app/models/profile\";\r\nimport {Link} from \"react-router-dom\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n    \r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attedee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attedee.username}\r\n                    trigger={\r\n                        <List.Item key={attedee.username} as={Link} to={`/profiles/${attedee.username}`}>\r\n                            <Image\r\n                                size='mini'\r\n                                circular src={attedee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attedee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attedee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from \"react\";\r\nimport {Button, Icon, Item, Label, Segment} from \"semantic-ui-react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from \"date-fns\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props) {\r\n    return (\r\n      <Segment.Group>\r\n          <Segment>\r\n              {activity.isCancelled && \r\n                <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} /> \r\n              }\r\n              <Item.Group>\r\n                  <Item>\r\n                      <Item.Image style={{marginBottom: 5}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                      <Item.Content>\r\n                          <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                              {activity.title}\r\n                          </Item.Header>\r\n                          <Item.Description>Hosted by <Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                          {activity.isHost && (\r\n                              <Item.Description>\r\n                                  <Label basic color='orange'>\r\n                                      You are hosting this activity\r\n                                  </Label>\r\n                              </Item.Description>\r\n                          )}\r\n                          {activity.isGoing && !activity.isHost && (\r\n                              <Item.Description>\r\n                                  <Label basic color='green'>\r\n                                      You are going to this activity\r\n                                  </Label>\r\n                              </Item.Description>\r\n                          )}\r\n                      </Item.Content>\r\n                  </Item>\r\n              </Item.Group>\r\n          </Segment>\r\n          <Segment>\r\n              <span>\r\n                  <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                  <Icon name='marker' /> {activity.venue}\r\n              </span>\r\n          </Segment>\r\n          <Segment secondary>\r\n              <ActivityListItemAttendee attendees={activity.attendees!} />\r\n          </Segment>\r\n          <Segment clearing>\r\n              <span>{activity.description}</span>\r\n              <Button\r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                color='teal'\r\n                floated='right'\r\n                content='View'\r\n              />\r\n          </Segment>\r\n      </Segment.Group>\r\n    )\r\n}","import React, { Fragment } from \"react\";\r\nimport {Header} from \"semantic-ui-react\";\r\nimport {useStore} from \"../../../app/stores/store\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n    \r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                        {activities.map(activity => (\r\n                            <ActivityListItem key={activity.id} activity={activity} />\r\n                        ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React from \"react\";\r\nimport {Header, Menu} from \"semantic-ui-react\";\r\nimport Calendar from \"react-calendar\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {useStore} from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activities' \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')} \r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate', date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Grid, Loader} from \"semantic-ui-react\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport {useStore} from \"../../../app/stores/store\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport {PagingParams} from \"../../../app/models/pagination\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\nexport default observer(function  ActivityDashboard() {\r\n    const {activityStore} = useStore();\r\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n    \r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1)\r\n            loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>  \r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport {Dimmer, Loader} from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import React from \"react\";\r\nimport {useField} from \"formik\";\r\nimport {Form, Label} from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React from \"react\";\r\nimport {useField} from \"formik\";\r\nimport {Form, Label, Select} from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]\r\n","import React from \"react\";\r\nimport {useField} from \"formik\";\r\nimport {Form, Label} from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from \"react-datepicker\";\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport {useStore} from \"../../../app/stores/store\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Link, useHistory, useParams} from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport {v4 as uuid} from 'uuid';\r\nimport {Formik, Form} from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport {categoryOptions} from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport {ActivityFormValues} from \"../../../app/models/activity\";\r\n\r\nexport default observer (function ActivityForm() {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {createActivity, updateActivity,\r\n        loadActivity, loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n    \r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required()\r\n    })\r\n    \r\n    useEffect(() => {\r\n        if (id)\r\n            loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n    }, [id, loadActivity]);\r\n    \r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n    \r\n    if (loadingInitial)\r\n        return <LoadingComponent content='Loading activity...' />\r\n    \r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput placeholder='Title' name='title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right'\r\n                            positive type='submit' content='Submit'/>\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel'/>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {format} from \"date-fns\";\r\nimport {useStore} from \"../../../app/stores/store\";\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}}\r\n                           ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                                disabled={activity.isCancelled}\r\n                                to={`/manage/${activity.id}`}\r\n                                color='orange'\r\n                                floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                            loading={loading}\r\n                            onClick={updateAttendance}\r\n                            color='teal'>\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from \"date-fns\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, {useEffect} from 'react'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport {useStore} from \"../../../app/stores/store\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Formik, Form, Field, FieldProps} from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport {formatDistanceToNow} from \"date-fns\";\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n    \r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n    \r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, {resetForm}) => commentStore.addComments(values).then(() => resetForm())}\r\n                    initialValues={{body: ''}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({isSubmitting, isValid, handleSubmit}) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{position: 'relative'}}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + Enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                \r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment> \r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    \r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                    \r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n","import React, {useEffect} from \"react\";\r\nimport {Grid} from \"semantic-ui-react\";\r\nimport {useStore} from \"../../../app/stores/store\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n    \r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id);\r\n        }\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n    \r\n    if (loadingInitial || !activity) return <LoadingComponent/>;\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from \"./ValidationErrors\";\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL + '/';\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Button, Header, Icon, Segment} from \"semantic-ui-react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import React from \"react\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Container, Header, Segment} from \"semantic-ui-react\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    \r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import React from \"react\";\r\nimport {useStore} from \"../../stores/store\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Modal} from \"semantic-ui-react\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n    \r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React from \"react\";\r\nimport {Divider, Grid, Header, Item, Segment, Statistic} from \"semantic-ui-react\";\r\nimport {Profile} from \"../../app/models/profile\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport {Header, Icon} from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n       borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Cropper} from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Button, Grid, Header} from \"semantic-ui-react\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content=\"Step 3 - Preview & Upload\" />\r\n                {files && files.length > 0 &&\r\n                <>\r\n                    <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import React, {SyntheticEvent, useState} from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Button, Card, Grid, Header, Image, Tab} from \"semantic-ui-react\";\r\nimport {Photo, Profile} from \"../../app/models/profile\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}: Props) {\r\n    const {profileStore: {isCurrentUser, uploadPhoto,\r\n        uploading, loading, setMainPhoto, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                                content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                                onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button basic color='red' icon='trash'\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport * as Yup from 'yup';\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport {Form, Formik} from \"formik\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport {Button} from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio:\r\n                profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name'\r\n                                 name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio'\r\n                                name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import {observer} from \"mobx-react-lite\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport {useState} from \"react\";\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Card, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n    \r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user'\r\n                            content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} \r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, {SyntheticEvent, useEffect} from \"react\";\r\nimport {Card, Grid, Header, Tab, TabProps, Image} from \"semantic-ui-react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {UserActivity} from \"../../app/models/profile\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {format} from \"date-fns\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                            content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import React from \"react\";\r\nimport {Tab} from \"semantic-ui-react\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\nimport {Profile} from \"../../app/models/profile\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n    \r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import React, {useEffect} from \"react\";\r\nimport {Grid} from \"semantic-ui-react\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, {useState} from \"react\";\r\nimport {Button, Divider, Dropdown, Grid, GridRow, Header, Icon, Label, Menu, Table} from \"semantic-ui-react\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nexport default function Testing() {\r\n    const clients = [\r\n        {\r\n            key: 'Jenny Hess',\r\n            text: 'Jenny Hess',\r\n            value: 'Jenny Hess'\r\n        },\r\n        {\r\n            key: 'Elliot Fu',\r\n            text: 'Elliot Fu',\r\n            value: 'Elliot Fu'\r\n        },\r\n        {\r\n            key: 'Stevie Feliciano',\r\n            text: 'Stevie Feliciano',\r\n            value: 'Stevie Feliciano'\r\n        },\r\n        {\r\n            key: 'Christian',\r\n            text: 'Christian',\r\n            value: 'Christian'\r\n        }\r\n    ]\r\n\r\n    const countryOptions = [\r\n        { key: 'af', value: 'af', flag: 'af', text: 'Afghanistan' },\r\n        { key: 'ax', value: 'ax', flag: 'ax', text: 'Aland Islands' },\r\n        { key: 'al', value: 'al', flag: 'al', text: 'Albania' },\r\n        { key: 'dz', value: 'dz', flag: 'dz', text: 'Algeria' },\r\n        { key: 'as', value: 'as', flag: 'as', text: 'American Samoa' },\r\n        { key: 'ad', value: 'ad', flag: 'ad', text: 'Andorra' },\r\n        { key: 'ao', value: 'ao', flag: 'ao', text: 'Angola' },\r\n        { key: 'ai', value: 'ai', flag: 'ai', text: 'Anguilla' },\r\n        { key: 'ag', value: 'ag', flag: 'ag', text: 'Antigua' },\r\n        { key: 'ar', value: 'ar', flag: 'ar', text: 'Argentina' },\r\n        { key: 'am', value: 'am', flag: 'am', text: 'Armenia' },\r\n        { key: 'aw', value: 'aw', flag: 'aw', text: 'Aruba' },\r\n        { key: 'au', value: 'au', flag: 'au', text: 'Australia' },\r\n        { key: 'at', value: 'at', flag: 'at', text: 'Austria' },\r\n        { key: 'az', value: 'az', flag: 'az', text: 'Azerbaijan' },\r\n        { key: 'bs', value: 'bs', flag: 'bs', text: 'Bahamas' },\r\n        { key: 'bh', value: 'bh', flag: 'bh', text: 'Bahrain' },\r\n        { key: 'bd', value: 'bd', flag: 'bd', text: 'Bangladesh' },\r\n        { key: 'bb', value: 'bb', flag: 'bb', text: 'Barbados' },\r\n        { key: 'by', value: 'by', flag: 'by', text: 'Belarus' },\r\n        { key: 'be', value: 'be', flag: 'be', text: 'Belgium' },\r\n        { key: 'bz', value: 'bz', flag: 'bz', text: 'Belize' },\r\n        { key: 'bj', value: 'bj', flag: 'bj', text: 'Benin' },\r\n    ]\r\n\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    \r\n    return (\r\n        <>\r\n            <Header content='Testing page' size='large' />\r\n            <Divider />\r\n            <Header size='medium' content='Dropdown' />\r\n            <Dropdown\r\n                clearable\r\n                placeholder='Select Client'\r\n                selection\r\n                options={clients}\r\n            />\r\n            <Divider />\r\n            <Header size='medium' content='Searchable dropdown' />\r\n            <Dropdown\r\n                icon='search'\r\n                placeholder='Select Country'\r\n                search\r\n                selection\r\n                clearable\r\n                options={countryOptions}\r\n                style={{border: 'solid 2px purple', width: '50%'}}\r\n            />\r\n            <Divider />\r\n            <Header content='Datepicker' size='medium' />\r\n            <DatePicker\r\n                placeholderText='Select Date'\r\n                dateFormat='d MMMM, yyyy'\r\n                selected={startDate}\r\n                onChange={(date) => setStartDate(date!)}\r\n            />\r\n            <p style={{marginTop: '10px'}}>{startDate.toString()}</p>\r\n            <Divider />\r\n            <Header content='Grid floated right' size='medium' />\r\n            <Grid>\r\n                <Grid.Column>\r\n                    <Button content='Left Button' positive />\r\n                </Grid.Column>\r\n                <Grid.Column floated='right'>\r\n                    <Button content='Right Button' positive />\r\n                </Grid.Column>\r\n            </Grid>\r\n            <Header content='Loading button' size='medium' />\r\n            <Button content='Loading' primary loading={true} />\r\n            <Divider />\r\n            <Header content='Tables' size='medium' />\r\n            <Table celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Header</Table.HeaderCell>\r\n                        <Table.HeaderCell>Header</Table.HeaderCell>\r\n                        <Table.HeaderCell>Header</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n\r\n                <Table.Body>\r\n                    <Table.Row>\r\n                        <Table.Cell>\r\n                            <Label ribbon>First</Label>\r\n                        </Table.Cell>\r\n                        <Table.Cell>Cell</Table.Cell>\r\n                        <Table.Cell>Cell</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell>Cell</Table.Cell>\r\n                        <Table.Cell>Cell</Table.Cell>\r\n                        <Table.Cell>Cell</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell>Cell</Table.Cell>\r\n                        <Table.Cell>Cell</Table.Cell>\r\n                        <Table.Cell>Cell</Table.Cell>\r\n                    </Table.Row>\r\n                </Table.Body>\r\n\r\n                <Table.Footer>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell colSpan='3'>\r\n                            <Menu floated='right' pagination>\r\n                                <Menu.Item as='a' icon>\r\n                                    <Icon name='chevron left' />\r\n                                </Menu.Item>\r\n                                <Menu.Item as='a'>1</Menu.Item>\r\n                                <Menu.Item as='a'>2</Menu.Item>\r\n                                <Menu.Item as='a'>3</Menu.Item>\r\n                                <Menu.Item as='a'>4</Menu.Item>\r\n                                <Menu.Item as='a' icon>\r\n                                    <Icon name='chevron right' />\r\n                                </Menu.Item>\r\n                            </Menu>\r\n                        </Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Footer>\r\n            </Table>\r\n\r\n            <Table celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Name</Table.HeaderCell>\r\n                        <Table.HeaderCell>Status</Table.HeaderCell>\r\n                        <Table.HeaderCell>Notes</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n\r\n                <Table.Body>\r\n                    <Table.Row>\r\n                        <Table.Cell>No Name Specified</Table.Cell>\r\n                        <Table.Cell>Unknown</Table.Cell>\r\n                        <Table.Cell negative>None</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row positive>\r\n                        <Table.Cell>Jimmy</Table.Cell>\r\n                        <Table.Cell>\r\n                            <Icon name='checkmark' />\r\n                            Approved\r\n                        </Table.Cell>\r\n                        <Table.Cell>None</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell>Jamie</Table.Cell>\r\n                        <Table.Cell>Unknown</Table.Cell>\r\n                        <Table.Cell positive>\r\n                            <Icon name='close' />\r\n                            Requires call\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row negative>\r\n                        <Table.Cell>Jill</Table.Cell>\r\n                        <Table.Cell>Unknown</Table.Cell>\r\n                        <Table.Cell>None</Table.Cell>\r\n                    </Table.Row>\r\n                </Table.Body>\r\n            </Table>\r\n            <Divider />\r\n            <Header content='Icons' size='medium' />\r\n            <GridRow>\r\n                <Icon name='angle left' size='big' />\r\n                <Icon name='angle right' size='big' />\r\n                <Icon name='home' size='big' />\r\n                <Icon name='redo alternate' size='big' />\r\n                <Icon name='calendar alternate outline' size='big' />\r\n            </GridRow>\r\n            <GridRow>\r\n                <Icon name='edit outline' size='big' />\r\n                <Icon name='save outline' size='big' />\r\n                <Icon name='folder outline' size='big' />\r\n                <Icon name='pound sign' size='big' />\r\n                <Icon name='paper plane outline' size='big' />\r\n            </GridRow>\r\n            <Header content='Circular Buttons with Icons' size='medium' />\r\n            <div style={{marginTop: '5px'}}>\r\n                <Button icon='check' circular positive />\r\n                <Button icon='bars' circular primary />\r\n                <Button icon='times' circular negative />\r\n            </div>\r\n        </>\r\n    )\r\n}","import {useStore} from \"../stores/store\";\r\nimport {Redirect, Route, RouteComponentProps, RouteProps} from \"react-router-dom\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    \r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport { Container } from \"semantic-ui-react\";\r\nimport NavBar from \"./NavBar\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Route, Switch, useLocation} from \"react-router-dom\";\r\nimport HomePage from \"../../features/home/HomePage\";\r\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\r\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\r\nimport ActivityDetails from \"../../features/activities/details/ActivityDetails\";\r\nimport TestErrors from \"../../features/errors/TestError\";\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport NotFound from \"../../features/errors/NotFound\";\r\nimport ServerError from \"../../features/errors/ServerError\";\r\nimport {useStore} from \"../stores/store\";\r\nimport LoadingComponent from \"./LoadingComponent\";\r\nimport ModalContainer from \"../common/modals/ModalContainer\";\r\nimport ProfilePage from \"../../features/profiles/ProfilePage\";\r\nimport Testing from \"../../features/testing/Testing\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\nfunction App() {\r\n    const location = useLocation();\r\n    const {commonStore, userStore} = useStore();\r\n    \r\n    useEffect(() => {\r\n        if (commonStore.token) {\r\n            userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n        } else {\r\n            commonStore.setAppLoaded();\r\n        }\r\n    }, [commonStore, userStore])\r\n    \r\n    if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n    \r\n  return (\r\n    <>\r\n        <ToastContainer position='bottom-right' hideProgressBar />\r\n        <ModalContainer />\r\n        <Route exact path='/' component={HomePage} />\r\n        <Route\r\n            path={'/(.+)'}\r\n            render={() => (\r\n                <>\r\n                    <NavBar />\r\n                    <Container style={{marginTop: '7em'}}>\r\n                        <Switch>\r\n                            <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                            <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                            <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                            <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                            <Route path='/errors' component={TestErrors} />\r\n                            <Route path='/server-error' component={ServerError} />\r\n                            <Route path='/testing' component={Testing} />\r\n                            <Route component={NotFound} />\r\n                        </Switch>\r\n                    </Container>\r\n                </>\r\n            )}\r\n        />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store, StoreContext} from './app/stores/store';\r\nimport {Router} from \"react-router-dom\";\r\nimport {createBrowserHistory} from 'history';\r\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n    <StoreContext.Provider value={store}>\r\n        <Router history={history}>\r\n            <ScrollToTop />\r\n            <App />\r\n        </Router>\r\n    </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}